/* tslint:disable */
/* eslint-disable */
/**
 * Checkin API
 * Checkin API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 * 管理者の情報
 * @export
 * @interface Admin
 */
export interface Admin {
  /**
   * traQ ID
   * @type {string}
   * @memberof Admin
   */
  id: string
}
/**
 * Customer の情報
 * @export
 * @interface Customer
 */
export interface Customer {
  /**
   * Customer ID
   * @type {string}
   * @memberof Customer
   */
  id?: string
  /**
   * traQ ID
   * @type {string}
   * @memberof Customer
   */
  traq_id?: string
  /**
   * Email
   * @type {string}
   * @memberof Customer
   */
  email?: string
  /**
   * Name
   * @type {string}
   * @memberof Customer
   */
  name?: string
}
/**
 * オンライン決済ページ由来の入金一覧
 * @export
 * @interface GetCheckoutSessionsResponse
 */
export interface GetCheckoutSessionsResponse {
  /**
   * 次のページがあるか
   * @type {boolean}
   * @memberof GetCheckoutSessionsResponse
   */
  has_more?: boolean
  /**
   *
   * @type {Array<GetCheckoutSessionsResponseDataInner>}
   * @memberof GetCheckoutSessionsResponse
   */
  data?: Array<GetCheckoutSessionsResponseDataInner>
}
/**
 *
 * @export
 * @interface GetCheckoutSessionsResponseDataInner
 */
export interface GetCheckoutSessionsResponseDataInner {
  /**
   * Checkout Session ID
   * @type {string}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  id?: string
  /**
   * 支払い金額
   * @type {number}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  amount_total?: number
  /**
   * 割引・税金を含まない支払い金額
   * @type {number}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  amount_subtotal?: number
  /**
   * 作成日時 (Unix 時間)
   * @type {number}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  created?: number
  /**
   *
   * @type {Customer}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  customer?: Customer
  /**
   * Checkout Session のステータス
   * @type {string}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  status?: GetCheckoutSessionsResponseDataInnerStatusEnum
  /**
   * この Checkout Session に関連付けられた PaymentIntent
   * @type {string}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  payment_intent?: string
  /**
   * Product ID
   * @type {string}
   * @memberof GetCheckoutSessionsResponseDataInner
   */
  product_id?: string
}

export const GetCheckoutSessionsResponseDataInnerStatusEnum = {
  Complete: 'complete',
  Expired: 'expired',
  Open: 'open',
} as const

export type GetCheckoutSessionsResponseDataInnerStatusEnum =
  (typeof GetCheckoutSessionsResponseDataInnerStatusEnum)[keyof typeof GetCheckoutSessionsResponseDataInnerStatusEnum]

/**
 * Invoice の情報
 * @export
 * @interface Invoice
 */
export interface Invoice {
  /**
   * 次のページがあるか
   * @type {boolean}
   * @memberof Invoice
   */
  has_more?: boolean
  /**
   *
   * @type {Array<InvoiceDataInner>}
   * @memberof Invoice
   */
  data?: Array<InvoiceDataInner>
}
/**
 *
 * @export
 * @interface InvoiceDataInner
 */
export interface InvoiceDataInner {
  /**
   * Invoice ID
   * @type {string}
   * @memberof InvoiceDataInner
   */
  id?: string
  /**
   * 最終的に支払う金額
   * @type {number}
   * @memberof InvoiceDataInner
   */
  amount_due?: number
  /**
   * 支払い済み金額
   * @type {number}
   * @memberof InvoiceDataInner
   */
  amount_paid?: number
  /**
   * 支払い残高
   * @type {number}
   * @memberof InvoiceDataInner
   */
  amount_remaining?: number
  /**
   * 作成日時 (Unix 時間)
   * @type {number}
   * @memberof InvoiceDataInner
   */
  created?: number
  /**
   *
   * @type {Customer}
   * @memberof InvoiceDataInner
   */
  customer?: Customer
  /**
   * 請求書ステータス
   * @type {string}
   * @memberof InvoiceDataInner
   */
  status?: InvoiceDataInnerStatusEnum
  /**
   * この請求書に関連付けられた PaymentIntent
   * @type {string}
   * @memberof InvoiceDataInner
   */
  payment_intent?: string
  /**
   * Product ID
   * @type {string}
   * @memberof InvoiceDataInner
   */
  product_id?: string
}

export const InvoiceDataInnerStatusEnum = {
  Draft: 'draft',
  Open: 'open',
  Paid: 'paid',
  Uncollectible: 'uncollectible',
  Void: 'void',
} as const

export type InvoiceDataInnerStatusEnum =
  (typeof InvoiceDataInnerStatusEnum)[keyof typeof InvoiceDataInnerStatusEnum]

/**
 * Customer 作成リクエスト
 * @export
 * @interface PostCustomerRequest
 */
export interface PostCustomerRequest {
  /**
   * Email
   * @type {string}
   * @memberof PostCustomerRequest
   */
  email: string
  /**
   * Name
   * @type {string}
   * @memberof PostCustomerRequest
   */
  name: string
  /**
   * traQ ID
   * @type {string}
   * @memberof PostCustomerRequest
   */
  traq_id?: string
}
/**
 * Invoice 作成リクエスト
 * @export
 * @interface PostInvoiceRequest
 */
export interface PostInvoiceRequest {
  /**
   * Customer ID
   * @type {string}
   * @memberof PostInvoiceRequest
   */
  customer_id: string
  /**
   * Product ID
   * @type {string}
   * @memberof PostInvoiceRequest
   */
  product_id: string
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 管理者を削除
     * @param {string} id 管理者の traQ ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdmin: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteAdmin', 'id', id)
      const localVarPath = `/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 管理者の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmins: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 管理者を作成
     * @param {Admin} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAdmin: async (admin?: Admin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        admin,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 管理者を削除
     * @param {string} id 管理者の traQ ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAdmin(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmin(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminApi.deleteAdmin']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 管理者の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdmins(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admin>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmins(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminApi.getAdmins']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 管理者を作成
     * @param {Admin} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postAdmin(
      admin?: Admin,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postAdmin(admin, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminApi.postAdmin']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminApiFp(configuration)
  return {
    /**
     *
     * @summary 管理者を削除
     * @param {string} id 管理者の traQ ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdmin(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteAdmin(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 管理者の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmins(options?: RawAxiosRequestConfig): AxiosPromise<Array<Admin>> {
      return localVarFp.getAdmins(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 管理者を作成
     * @param {Admin} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAdmin(admin?: Admin, options?: RawAxiosRequestConfig): AxiosPromise<Admin> {
      return localVarFp.postAdmin(admin, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   *
   * @summary 管理者を削除
   * @param {string} id 管理者の traQ ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public deleteAdmin(id: string, options?: RawAxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .deleteAdmin(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 管理者の一覧を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public getAdmins(options?: RawAxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .getAdmins(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 管理者を作成
   * @param {Admin} [admin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public postAdmin(admin?: Admin, options?: RawAxiosRequestConfig) {
    return AdminApiFp(this.configuration)
      .postAdmin(admin, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Customer を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [traqId] traQ ID
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer: async (
      customerId?: string,
      traqId?: string,
      email?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/customer`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (customerId !== undefined) {
        localVarQueryParameter['customer_id'] = customerId
      }

      if (traqId !== undefined) {
        localVarQueryParameter['traq_id'] = traqId
      }

      if (email !== undefined) {
        localVarQueryParameter['email'] = email
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Customer を更新
     * @param {PostCustomerRequest} [postCustomerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCustomer: async (
      postCustomerRequest?: PostCustomerRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/customer`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postCustomerRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Customer を作成
     * @param {PostCustomerRequest} [postCustomerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomer: async (
      postCustomerRequest?: PostCustomerRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/customer`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postCustomerRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Customer を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [traqId] traQ ID
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCustomer(
      customerId?: string,
      traqId?: string,
      email?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(
        customerId,
        traqId,
        email,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CustomerApi.getCustomer']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Customer を更新
     * @param {PostCustomerRequest} [postCustomerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchCustomer(
      postCustomerRequest?: PostCustomerRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchCustomer(
        postCustomerRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CustomerApi.patchCustomer']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Customer を作成
     * @param {PostCustomerRequest} [postCustomerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postCustomer(
      postCustomerRequest?: PostCustomerRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomer(
        postCustomerRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CustomerApi.postCustomer']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CustomerApiFp(configuration)
  return {
    /**
     *
     * @summary Customer を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [traqId] traQ ID
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(
      customerId?: string,
      traqId?: string,
      email?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Customer> {
      return localVarFp
        .getCustomer(customerId, traqId, email, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Customer を更新
     * @param {PostCustomerRequest} [postCustomerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchCustomer(
      postCustomerRequest?: PostCustomerRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Customer> {
      return localVarFp
        .patchCustomer(postCustomerRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Customer を作成
     * @param {PostCustomerRequest} [postCustomerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCustomer(
      postCustomerRequest?: PostCustomerRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Customer> {
      return localVarFp
        .postCustomer(postCustomerRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
  /**
   *
   * @summary Customer を取得
   * @param {string} [customerId] Customer ID
   * @param {string} [traqId] traQ ID
   * @param {string} [email] Email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerApi
   */
  public getCustomer(
    customerId?: string,
    traqId?: string,
    email?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerApiFp(this.configuration)
      .getCustomer(customerId, traqId, email, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Customer を更新
   * @param {PostCustomerRequest} [postCustomerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerApi
   */
  public patchCustomer(postCustomerRequest?: PostCustomerRequest, options?: RawAxiosRequestConfig) {
    return CustomerApiFp(this.configuration)
      .patchCustomer(postCustomerRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Customer を作成
   * @param {PostCustomerRequest} [postCustomerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerApi
   */
  public postCustomer(postCustomerRequest?: PostCustomerRequest, options?: RawAxiosRequestConfig) {
    return CustomerApiFp(this.configuration)
      .postCustomer(postCustomerRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export const InvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Invoice を作成
     * @param {PostInvoiceRequest} [postInvoiceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postInvoice: async (
      postInvoiceRequest?: PostInvoiceRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/invoice`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        postInvoiceRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * InvoiceApi - functional programming interface
 * @export
 */
export const InvoiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InvoiceApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Invoice を作成
     * @param {PostInvoiceRequest} [postInvoiceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postInvoice(
      postInvoiceRequest?: PostInvoiceRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postInvoice(
        postInvoiceRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['InvoiceApi.postInvoice']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * InvoiceApi - factory interface
 * @export
 */
export const InvoiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = InvoiceApiFp(configuration)
  return {
    /**
     *
     * @summary Invoice を作成
     * @param {PostInvoiceRequest} [postInvoiceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postInvoice(
      postInvoiceRequest?: PostInvoiceRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Invoice> {
      return localVarFp
        .postInvoice(postInvoiceRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * InvoiceApi - object-oriented interface
 * @export
 * @class InvoiceApi
 * @extends {BaseAPI}
 */
export class InvoiceApi extends BaseAPI {
  /**
   *
   * @summary Invoice を作成
   * @param {PostInvoiceRequest} [postInvoiceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InvoiceApi
   */
  public postInvoice(postInvoiceRequest?: PostInvoiceRequest, options?: RawAxiosRequestConfig) {
    return InvoiceApiFp(this.configuration)
      .postInvoice(postInvoiceRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ListApi - axios parameter creator
 * @export
 */
export const ListApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary オンライン決済ページ由来の入金一覧を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [subscriptionId] Subscription ID
     * @param {number} [limit] 取得件数
     * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
     * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
     * @param {string} [paymentIntentId] PaymentIntent ID
     * @param {GetCheckoutSessionsStatusEnum} [status] Checkout Session のステータス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckoutSessions: async (
      customerId?: string,
      subscriptionId?: string,
      limit?: number,
      startingAfter?: string,
      endingBefore?: string,
      paymentIntentId?: string,
      status?: GetCheckoutSessionsStatusEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/list/checkout-sessions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (customerId !== undefined) {
        localVarQueryParameter['customer_id'] = customerId
      }

      if (subscriptionId !== undefined) {
        localVarQueryParameter['subscription_id'] = subscriptionId
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (startingAfter !== undefined) {
        localVarQueryParameter['starting_after'] = startingAfter
      }

      if (endingBefore !== undefined) {
        localVarQueryParameter['ending_before'] = endingBefore
      }

      if (paymentIntentId !== undefined) {
        localVarQueryParameter['payment_intent_id'] = paymentIntentId
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 請求書由来の入金一覧を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [subscriptionId] Subscription ID
     * @param {number} [limit] 取得件数
     * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
     * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
     * @param {GetInvoicesStatusEnum} [status] 請求書ステータス
     * @param {GetInvoicesCollectionMethodEnum} [collectionMethod] 請求書の支払い方法
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices: async (
      customerId?: string,
      subscriptionId?: string,
      limit?: number,
      startingAfter?: string,
      endingBefore?: string,
      status?: GetInvoicesStatusEnum,
      collectionMethod?: GetInvoicesCollectionMethodEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/list/invoices`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (customerId !== undefined) {
        localVarQueryParameter['customer_id'] = customerId
      }

      if (subscriptionId !== undefined) {
        localVarQueryParameter['subscription_id'] = subscriptionId
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (startingAfter !== undefined) {
        localVarQueryParameter['starting_after'] = startingAfter
      }

      if (endingBefore !== undefined) {
        localVarQueryParameter['ending_before'] = endingBefore
      }

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      if (collectionMethod !== undefined) {
        localVarQueryParameter['collection_method'] = collectionMethod
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ListApi - functional programming interface
 * @export
 */
export const ListApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ListApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary オンライン決済ページ由来の入金一覧を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [subscriptionId] Subscription ID
     * @param {number} [limit] 取得件数
     * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
     * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
     * @param {string} [paymentIntentId] PaymentIntent ID
     * @param {GetCheckoutSessionsStatusEnum} [status] Checkout Session のステータス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCheckoutSessions(
      customerId?: string,
      subscriptionId?: string,
      limit?: number,
      startingAfter?: string,
      endingBefore?: string,
      paymentIntentId?: string,
      status?: GetCheckoutSessionsStatusEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCheckoutSessionsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckoutSessions(
        customerId,
        subscriptionId,
        limit,
        startingAfter,
        endingBefore,
        paymentIntentId,
        status,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ListApi.getCheckoutSessions']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 請求書由来の入金一覧を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [subscriptionId] Subscription ID
     * @param {number} [limit] 取得件数
     * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
     * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
     * @param {GetInvoicesStatusEnum} [status] 請求書ステータス
     * @param {GetInvoicesCollectionMethodEnum} [collectionMethod] 請求書の支払い方法
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvoices(
      customerId?: string,
      subscriptionId?: string,
      limit?: number,
      startingAfter?: string,
      endingBefore?: string,
      status?: GetInvoicesStatusEnum,
      collectionMethod?: GetInvoicesCollectionMethodEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoices(
        customerId,
        subscriptionId,
        limit,
        startingAfter,
        endingBefore,
        status,
        collectionMethod,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ListApi.getInvoices']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ListApi - factory interface
 * @export
 */
export const ListApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ListApiFp(configuration)
  return {
    /**
     *
     * @summary オンライン決済ページ由来の入金一覧を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [subscriptionId] Subscription ID
     * @param {number} [limit] 取得件数
     * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
     * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
     * @param {string} [paymentIntentId] PaymentIntent ID
     * @param {GetCheckoutSessionsStatusEnum} [status] Checkout Session のステータス
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckoutSessions(
      customerId?: string,
      subscriptionId?: string,
      limit?: number,
      startingAfter?: string,
      endingBefore?: string,
      paymentIntentId?: string,
      status?: GetCheckoutSessionsStatusEnum,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetCheckoutSessionsResponse> {
      return localVarFp
        .getCheckoutSessions(
          customerId,
          subscriptionId,
          limit,
          startingAfter,
          endingBefore,
          paymentIntentId,
          status,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 請求書由来の入金一覧を取得
     * @param {string} [customerId] Customer ID
     * @param {string} [subscriptionId] Subscription ID
     * @param {number} [limit] 取得件数
     * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
     * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
     * @param {GetInvoicesStatusEnum} [status] 請求書ステータス
     * @param {GetInvoicesCollectionMethodEnum} [collectionMethod] 請求書の支払い方法
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(
      customerId?: string,
      subscriptionId?: string,
      limit?: number,
      startingAfter?: string,
      endingBefore?: string,
      status?: GetInvoicesStatusEnum,
      collectionMethod?: GetInvoicesCollectionMethodEnum,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Invoice> {
      return localVarFp
        .getInvoices(
          customerId,
          subscriptionId,
          limit,
          startingAfter,
          endingBefore,
          status,
          collectionMethod,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ListApi - object-oriented interface
 * @export
 * @class ListApi
 * @extends {BaseAPI}
 */
export class ListApi extends BaseAPI {
  /**
   *
   * @summary オンライン決済ページ由来の入金一覧を取得
   * @param {string} [customerId] Customer ID
   * @param {string} [subscriptionId] Subscription ID
   * @param {number} [limit] 取得件数
   * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
   * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
   * @param {string} [paymentIntentId] PaymentIntent ID
   * @param {GetCheckoutSessionsStatusEnum} [status] Checkout Session のステータス
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListApi
   */
  public getCheckoutSessions(
    customerId?: string,
    subscriptionId?: string,
    limit?: number,
    startingAfter?: string,
    endingBefore?: string,
    paymentIntentId?: string,
    status?: GetCheckoutSessionsStatusEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return ListApiFp(this.configuration)
      .getCheckoutSessions(
        customerId,
        subscriptionId,
        limit,
        startingAfter,
        endingBefore,
        paymentIntentId,
        status,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 請求書由来の入金一覧を取得
   * @param {string} [customerId] Customer ID
   * @param {string} [subscriptionId] Subscription ID
   * @param {number} [limit] 取得件数
   * @param {string} [startingAfter] 指定された ID のオブジェクト以降のオブジェクトを取得
   * @param {string} [endingBefore] 指定された ID のオブジェクト以前のオブジェクトを取得
   * @param {GetInvoicesStatusEnum} [status] 請求書ステータス
   * @param {GetInvoicesCollectionMethodEnum} [collectionMethod] 請求書の支払い方法
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListApi
   */
  public getInvoices(
    customerId?: string,
    subscriptionId?: string,
    limit?: number,
    startingAfter?: string,
    endingBefore?: string,
    status?: GetInvoicesStatusEnum,
    collectionMethod?: GetInvoicesCollectionMethodEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return ListApiFp(this.configuration)
      .getInvoices(
        customerId,
        subscriptionId,
        limit,
        startingAfter,
        endingBefore,
        status,
        collectionMethod,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const GetCheckoutSessionsStatusEnum = {
  Complete: 'complete',
  Expired: 'expired',
  Open: 'open',
} as const
export type GetCheckoutSessionsStatusEnum =
  (typeof GetCheckoutSessionsStatusEnum)[keyof typeof GetCheckoutSessionsStatusEnum]
/**
 * @export
 */
export const GetInvoicesStatusEnum = {
  Draft: 'draft',
  Open: 'open',
  Paid: 'paid',
  Uncollectible: 'uncollectible',
  Void: 'void',
} as const
export type GetInvoicesStatusEnum =
  (typeof GetInvoicesStatusEnum)[keyof typeof GetInvoicesStatusEnum]
/**
 * @export
 */
export const GetInvoicesCollectionMethodEnum = {
  ChargeAutomatically: 'charge_automatically',
  SendInvoice: 'send_invoice',
} as const
export type GetInvoicesCollectionMethodEnum =
  (typeof GetInvoicesCollectionMethodEnum)[keyof typeof GetInvoicesCollectionMethodEnum]

/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Webhook の invoice.paid イベントを受け取る
     * @param {string} stripeSignature Stripe が送信する認証情報
     * @param {Invoice} [invoice]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhookInvoicePaid: async (
      stripeSignature: string,
      invoice?: Invoice,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stripeSignature' is not null or undefined
      assertParamExists('postWebhookInvoicePaid', 'stripeSignature', stripeSignature)
      const localVarPath = `/webhook/invoice-paid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (stripeSignature != null) {
        localVarHeaderParameter['Stripe-Signature'] = String(stripeSignature)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        invoice,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Webhook の invoice.paid イベントを受け取る
     * @param {string} stripeSignature Stripe が送信する認証情報
     * @param {Invoice} [invoice]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postWebhookInvoicePaid(
      stripeSignature: string,
      invoice?: Invoice,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postWebhookInvoicePaid(
        stripeSignature,
        invoice,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['WebhookApi.postWebhookInvoicePaid']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WebhookApiFp(configuration)
  return {
    /**
     *
     * @summary Webhook の invoice.paid イベントを受け取る
     * @param {string} stripeSignature Stripe が送信する認証情報
     * @param {Invoice} [invoice]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhookInvoicePaid(
      stripeSignature: string,
      invoice?: Invoice,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .postWebhookInvoicePaid(stripeSignature, invoice, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI {
  /**
   *
   * @summary Webhook の invoice.paid イベントを受け取る
   * @param {string} stripeSignature Stripe が送信する認証情報
   * @param {Invoice} [invoice]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public postWebhookInvoicePaid(
    stripeSignature: string,
    invoice?: Invoice,
    options?: RawAxiosRequestConfig,
  ) {
    return WebhookApiFp(this.configuration)
      .postWebhookInvoicePaid(stripeSignature, invoice, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
